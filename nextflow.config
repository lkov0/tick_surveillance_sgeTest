
params {

  // --------------------------------                                             
  // Directories for input and output                                             
  // --------------------------------                                             
  input_dir = "$baseDir/input/"                                            
  fastq_dir = "${input_dir}/fastq/"                                 
                                                                                  
  // Directory where R (and any other) scripts are.                                                 
  script_dir="${baseDir}/scripts"                                          
                                                                                  
  outdir = "${baseDir}/results"                                              
  initial_fastqc_dir = "${outdir}/initial_fastqc/"                  
  post_trim_fastqc_dir = "${outdir}/post_trim_fastqc/"              
  trimmed_outdir = "${outdir}/trimmed_fastq"                        
  tracedir = "${outdir}/pipeline_info"
                                                                                
  // -------------------                                                          
  // Reference sequences                                                          
  // -------------------                                                          
  // TODO: check that appropriate refseq files exist                              
  refseq_dir = "${baseDir}/refseq"                                         
  targets = "${params.refseq_dir}/targets.tsv"                             
  // off target file not implemented 
  // off_target_refseq_fasta = "${params.refseq_dir}/off_target_products.fasta"
                                                                                  
  // ---------------                                                              
  // Sample metadata                                                              
  // ---------------                                                              
  // TODO: Force the user to specify a file (?)                         
  metadata = "${params.input_dir}/sample_metadata.xlsx"                    

  // --------
  // Versions
  // --------
  // TODO: versioning of pipeline, reference sequences, etc: how to best do (?)
  params.pipeline_version = "2021-05-19"
  params.refseq_version = "2021-01-08"
  params.primers_version = "2021-01-08"
  
  // ---------
  // Trimming 
  // ---------
  // the primers that will be trimmed off of the ends of amplicons
  params.primers = "${params.refseq_dir}/primers.tsv"
  
  // shortest amplicon = tick Actin @ 196 bp
  params.post_trim_min_length = "100" 

  // to trim Tru-seq style adapters need 10 bp of overlap
  // this to avoid false-positive trimming
  params.adapters_min_overlap = 10
  
  
  // ----------------------------------------------
  // Blast e-value cutoffs and other configuration
  // ----------------------------------------------
  params.max_blast_refseq_evalue = "1e-10"
  params.max_blast_nt_evalue = "1e-10"

  // Should BLAST of unassigned sequences be remote (use -remote option)
  // This will cause blastn to run much slower but will not require
  // the installation of a local database.
  //
  // This is the option that should default to unless a local database
  // is specified and verified to exist.
  // set in profile below
  //  params.remote_blast_nt = true


  // turn this parameter on to pull docker containers and convert to singularity
  //
  // see e.g.: https://nf-co.re/gwas#quick-start, which states:
  //
  //   "If you are persistently observing issues downloading Singularity images directly 
  //    due to timeout or network issues then please use the --singularity_pull_docker_container 
  //    parameter to pull and convert the Docker image instead."
  //
  // TODO: this option is provided in nf-core pipelines but is it necessary?
  //       possibly remove this option and the corresponding if/else statment in processes?
  //
  singularity_pull_docker_container = false
}

process {

  withLabel: 'highmem' {
    maxForks = 4
  }
  withLabel: 'lowmem' {
    maxForks = 16
  }
}


profiles {

  local {
    exector.name = 'local'
    executor.queueSize = 32
    executor.cpus = 32
    executor.memory = '100 GB'
    params.local_nt_database ="/home/mdstengl/NCBI_databases/nt"
    params.remote_blast_nt = false
  }

  // TODO: setup executor profile for CDC HPC environment
  CDC_hpc {
    exector.name = 'local'
    executor.queueSize = 32
    executor.cpus = 32
    executor.memory = '100 GB'
    params.local_nt_database ="/scicomp/reference/ncbi-blast/current/nt"  
    params.remote_blast_nt = false
  }
    
  conda {
    params.enable_conda    = true
    conda.cacheDir         = "$HOME/conda_cacheDir"
    singularity.enabled    = false
  }

  singularity {
    params.enable_conda    = false
    singularity.enabled    = true
    singularity.autoMounts = true
    singularity.cacheDir   = "$HOME/singularity_cacheDir"
  }
  test { 
    includeConfig 'conf/test.config'
  }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.pdf"
}

manifest {
    name            = 'stenglein-lab/tick_surveillance'
    author          = 'Mark Stenglein'
    homePage        = 'https://github.com/stenglein-lab/tick_surveillance'
    description     = 'A pipeline to analyze amplicon sequencing data for tick-borne pathogens'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0'
}



// Turn this option on to delete all intermediate files from the analysis
// see: https://www.nextflow.io/docs/latest/config.html
// cleanup = true
